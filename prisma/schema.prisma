// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  currentTeamId Int?          @map("current_team_id")
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
  teamUsers     TeamUser[]
}

model Task {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @db.Char(36)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  progress      Int       @default(0)
  userId        String
}

model Team {
  id              Int         @id @default(autoincrement())
  name            String
  ownerId         String?     @map("owner_id")
  createdAt       DateTime    @default(now()) @map("created_at")

  owner           User?       @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  teamUsers       TeamUser[]
  roles           Role[]
  permissions     Permission[]
  rolePermissions RolePermission[]

  @@index ([ownerId])
}

model TeamUser {
  id              Int         @id @default(autoincrement())
  teamId          Int         @map("team_id")
  userId          String      @map("user_id")
  roleId          Int         @map("role_id")
  createdAt       DateTime    @default(now()) @map("created_at")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@index ([teamId])
  @@index ([userId])
  @@index ([roleId])
}

model Role {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String?
  teamId          Int         @map("team_id")
  createdAt       DateTime    @default(now()) @map("created_at")

  rolePermissions RolePermission[]
  team            Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  TeamUser        TeamUser[]

  @@index ([teamId])
}

model Permission {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  description     String?
  teamId          Int         @map("team_id")
  createdAt       DateTime    @default(now()) @map("created_at")

  rolePermissions RolePermission[]
  team            Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index ([teamId])
}

model RolePermission {
  id              Int         @id @default(autoincrement())
  roleId          Int         @map("role_id")
  permissionId    Int         @map("permission_id")
  teamId          Int         @map("team_id")
  createdAt       DateTime    @default(now()) @map("created_at")

  role            Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  team            Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index ([roleId])
  @@index ([permissionId])
  @@index ([teamId])
}
