// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]    // Added for RBAC
}

model Task {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @db.Char(36)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  progress      Int       @default(0)
  userId        String
  isPrivate     Boolean   @default(false) // Added for privacy control
}

model Role {
  id            Int              @id @default(autoincrement())
  uuid          String           @unique @db.Char(36)
  name          String           @unique // e.g. "Admin", "CoreHubMember", "ProfServicesMember"
  permissions   RolePermission[]
  userRoles     UserRole[]
  created_at    DateTime         @default(now()) @db.Timestamp(0)
  updated_at    DateTime         @default(now()) @updatedAt @db.Timestamp(0)
}

model Permission {
  id              Int              @id @default(autoincrement())
  uuid            String           @unique @db.Char(36)
  name            String           // e.g. "viewTask", "editTask", "deleteTask"
  action          String           // e.g. "read", "update", "delete"
  rolePermissions RolePermission[]
  created_at      DateTime         @default(now()) @db.Timestamp(0)
  updated_at      DateTime         @default(now()) @updatedAt @db.Timestamp(0)
}

model RolePermission {
  id              Int        @id @default(autoincrement())
  roleId          Int
  permissionId    Int
  role            Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model UserRole {
  id              Int      @id @default(autoincrement())
  userId          String
  roleId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now()) @db.Timestamp(0)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}