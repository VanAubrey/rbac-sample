// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  MEMBER
}

enum TaskVisibility {
  PUBLIC
  PRIVATE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]        @relation("UserTasks")
  userTeams     UserTeam[]
}

model Team {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @db.Char(36)
  name          String        @unique
  tasks         Task[]        @relation("TeamTasks")
  userTeams     UserTeam[]
}

model UserTeam {
  userId        String
  teamId        Int
  role          Role          @default(MEMBER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Task {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @db.Char(36)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  updated_at    DateTime? @default(now()) @db.Timestamp(0)
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  progress      Int       @default(0)
  userId        String
  visibility    TaskVisibility @default(PUBLIC)
  teamId        Int?

  user User  @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
  team Team? @relation("TeamTasks", fields: [teamId], references: [id])

  @@index([userId])
  @@index([teamId])
}